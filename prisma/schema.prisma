generator client {
    provider = "prisma-client-js"

    previewFeatures = ["referentialIntegrity", "fullTextSearch", "fullTextIndex"]
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")

    referentialIntegrity = "prisma"
}

model Example {
    id Int @id @default(autoincrement())
}

model User {
    id        Int        @id @default(autoincrement())
    firstName String?
    lastName  String?
    email     String?    @unique
    role      Role       @default(NURSE)
    image     String?
    gender    String?
    birthday  DateTime?
    address   String?
    mobile    String?
    password  String?
    createAt  DateTime   @default(now())
    updateAt  DateTime   @updatedAt
    Physician Physician?

    attendingNurse       MedicalRecord? @relation("attendingNurse", fields: [attendingNurseId], references: [id])
    attendingNurseId     Int?
    attendingPhysician   MedicalRecord? @relation("attendingPhysician", fields: [attendingPhysicianId], references: [id])
    attendingPhysicianId Int?

    addedPatient Patient[]
    UserLogs     UserLogs[]
}

model Physician {
    id            Int     @id @default(autoincrement())
    expertise     String?
    licenseNumber String?
    userId        Int     @unique
    user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Room {
    id            Int             @id @default(autoincrement())
    roomNo        String?
    category      RoomCat         @default(WARD)
    station       String?
    status        RoomStatus      @default(VACANT)
    floor         String?
    price         Decimal?        @db.Decimal(10, 2)
    MedicalRecord MedicalRecord[]
}

model Patient {
    id            Int          @id @default(autoincrement())
    firstName     String?
    lastName      String?
    middleName    String?
    gender        String?
    birthday      DateTime?
    address       String?
    mobile        String?
    civilStatus   CivilStatus?
    nationality   String?
    religion      String?
    weight        String?
    height        String?
    bloodPressure String?
    bloodType     String?
    createAt      DateTime     @default(now())
    updateAt      DateTime     @updatedAt
    addedPatient  User?        @relation(fields: [addedById], references: [id], onDelete: Restrict, onUpdate: NoAction)
    addedById     Int?
}

model MedicalRecord {
    id             Int           @id @default(autoincrement())
    weight         String?
    height         String?
    bloodPressure  String?
    chiefComplaint String?
    guardian       String?
    status         MedicalStatus @default(Admit)
    createAt       DateTime      @default(now())
    updateAt       DateTime      @updatedAt

    room Room @relation(fields: [roomId], references: [id])

    attendingNurse     User[] @relation("attendingNurse")
    attendingPhysician User[] @relation("attendingPhysician")

    roomId Int
}

model UserLogs {
    id       Int      @id @default(autoincrement())
    type     String?
    createAt DateTime @default(now())
    user     User     @relation(fields: [userId], references: [id])
    userId   Int
}

model Medicine {
    id       Int      @id @default(autoincrement())
    name     String?
    quantity Int?
    unit     Unit
    price    Decimal? @db.Decimal(10, 2)
}

enum MedicalStatus {
    Admit
    Discharge
}

enum CivilStatus {
    Single
    Married
    Divorced
    Separated
    Widowed
}

enum Unit {
    kg
    g
    mg
    mcg
    L
    ml
    cc
    mol
    mmol
}

enum Role {
    ADMIN
    NURSE
    PHYSICIAN
    PHARMACIST
}

enum RoomCat {
    WARD
    SEMI_PRIVATE
    PRIVATE
}

enum RoomStatus {
    VACANT
    OCCUPIED
    OUT_OF_SERVICE
}
