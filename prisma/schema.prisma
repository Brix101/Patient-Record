generator client {
  provider = "prisma-client-js"

  previewFeatures = ["referentialIntegrity", "fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")

  referentialIntegrity = "prisma"
}

model Example {
  id Int @id @default(autoincrement())
}

model User {
  id        Int        @id @default(autoincrement())
  firstName String?
  lastName  String?
  email     String?    @unique
  role      Role       @default(NURSE)
  image     String?
  gender    String?
  birthday  DateTime?
  address   String?
  mobile    String?
  password  String?
  active    Boolean    @default(true)
  createAt  DateTime   @default(now())
  updateAt  DateTime   @updatedAt
  Physician Physician?

  addedPatient Patient[]
  userLogs     UserLogs[]
}

model Physician {
  id            Int      @id @default(autoincrement())
  expertise     String?
  licenseNumber String?
  sessionCharge Decimal? @db.Decimal(10, 2)
  userId        Int      @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  medicalRecord MedicalRecord[]
  Appointment   Appointment[]
}

model Room {
  id       Int        @id @default(autoincrement())
  roomNo   String?
  category RoomCat    @default(WARD)
  station  String?
  status   RoomStatus @default(VACANT)
  floor    String?
  price    Decimal?   @db.Decimal(10, 2)
  active   Boolean    @default(true)

  medicalRecord MedicalRecord[]
}

model Patient {
  id          Int          @id @default(autoincrement())
  firstName   String?
  lastName    String?
  middleName  String?
  gender      String?
  birthday    DateTime?
  address     String?
  mobile      String?
  civilStatus CivilStatus?
  nationality String?
  religion    String?
  bloodType   String?
  active      Boolean      @default(true)
  isAdmitted  Boolean      @default(false)

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  addedPatient User? @relation(fields: [addedById], references: [id], onDelete: Restrict, onUpdate: NoAction)
  addedById    Int?

  medicalRecord MedicalRecord[]

  @@index([addedById])
}

model MedicalRecord {
  id             Int            @id @default(autoincrement())
  weight         String?
  height         String?
  bloodPressure  String?
  chiefComplaint String?
  guardian       String?
  guardianNo     String?
  status         MedicalStatus? @default(Admitted)
  admittedAt     DateTime       @default(now())
  discharedAt    DateTime?
  createAt       DateTime       @default(now())
  updateAt       DateTime       @updatedAt
  active         Boolean        @default(true)
  receipt        Receipt?
  medicine       Medicine[]
  appointments   Appointment[]

  admittingDiagnosis String?
  finalDiagnosis     String?
  otherDiagnosis     String?
  result             MedicalResult?

  room   Room? @relation(fields: [roomId], references: [id])
  roomId Int?

  patient   Patient? @relation(fields: [patientId], references: [id], onDelete: Cascade)
  patientId Int

  physician       Physician?        @relation(fields: [physicianId], references: [id])
  physicianId     Int?
  MedicineRequest MedicineRequest[]

  @@index([roomId])
  @@index([patientId])
  @@index([physicianId])
}

model Receipt {
  id           Int     @id @default(autoincrement())
  philHealthId String?

  roomCharge        Decimal? @db.Decimal(10, 2)
  appointmentCharge Decimal? @db.Decimal(10, 2)
  medicineCharge    Decimal? @db.Decimal(10, 2)

  total           Decimal?       @db.Decimal(10, 2)
  medicalRecord   MedicalRecord? @relation(fields: [medicalRecordId], references: [id])
  medicalRecordId Int?           @unique

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model Appointment {
  id     Int               @id @default(autoincrement())
  status AppointmentStatus @default(Active)
  start  DateTime?
  end    DateTime?

  physician   Physician @relation(fields: [physicianId], references: [id], onDelete: Cascade)
  physicianId Int

  MedicalRecord   MedicalRecord? @relation(fields: [medicalRecordId], references: [id], onDelete: Cascade)
  medicalRecordId Int?

  @@index([physicianId])
  @@index([medicalRecordId])
}

model MedicineRequest {
  id            Int               @id @default(autoincrement())
  quantity      Int?
  requestStatus MedicineReqStatus @default(Delivered)
  active        Boolean           @default(true)

  MedicalRecord MedicalRecord? @relation(fields: [medicalRecordId], references: [id])

  medicalRecordId Int

  @@index([medicalRecordId])
}

model Medicine {
  id       Int      @id @default(autoincrement())
  name     String?
  quantity Int?
  price    Decimal? @db.Decimal(10, 2)
  total    Decimal? @db.Decimal(10, 2)

  MedicalRecord   MedicalRecord? @relation(fields: [medicalRecordId], references: [id])
  medicalRecordId Int?
}

model UserLogs {
  id       Int      @id @default(autoincrement())
  type     String?
  createAt DateTime @default(now())
  user     User     @relation(fields: [userId], references: [id])
  userId   Int

  @@index([userId])
}

enum AppointmentStatus {
  Active
  Cancelled
  Finished
}

enum MedicineReqStatus {
  Pending
  Delivered
}

enum MedicalStatus {
  Admitted
  Discharged
  Tranfered
}

enum MedicalResult {
  Recovered
  Died
  Improved
  Unimproved
}

enum CivilStatus {
  Single
  Married
  Divorced
  Separated
  Widowed
}

enum Unit {
  kg
  g
  mg
  mcg
  L
  ml
  cc
  mol
  mmol
}

enum Role {
  ADMIN
  NURSE
  PHYSICIAN
}

enum RoomCat {
  WARD
  SEMI_PRIVATE
  PRIVATE
}

enum RoomStatus {
  VACANT
  OCCUPIED
  OUT_OF_SERVICE
}
