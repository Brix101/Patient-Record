generator client {
    provider = "prisma-client-js"

    previewFeatures = ["referentialIntegrity", "fullTextSearch", "fullTextIndex"]
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")

    referentialIntegrity = "prisma"
}

model Example {
    id Int @id @default(autoincrement())
}

model User {
    id        Int        @id @default(autoincrement())
    firstName String?
    lastName  String?
    email     String?    @unique
    role      Role       @default(NURSE)
    image     String?
    gender    String?
    birthday  DateTime?
    address   String?
    mobile    String?
    password  String?
    createAt  DateTime   @default(now())
    updateAt  DateTime   @updatedAt
    Physician Physician?

    attendingNurse       Patient? @relation("attendingNurse", fields: [attendingNurseId], references: [id])
    attendingNurseId     Int?
    attendingPhysician   Patient? @relation("attendingPhysician", fields: [attendingPhysicianId], references: [id])
    attendingPhysicianId Int?

    attendedPatient Patient[] @relation("attendedPatient")
}

model Physician {
    id            Int     @id @default(autoincrement())
    expertise     String?
    licenseNumber String?
    userId        Int     @unique
    user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Room {
    id       Int        @id @default(autoincrement())
    roomNo   String?
    category RoomCat    @default(WARD)
    station  String?
    status   RoomStatus @default(VACANT)
    floor    String?
    price    Decimal?   @db.Decimal(10, 2)
}

model Patient {
    id             Int      @id @default(autoincrement())
    name           String?
    gender         String?
    birthday       DateTime
    address        String?
    mobile         String?
    civilStatus    String?
    nationality    String?
    religion       String?
    weight         String?
    height         String?
    bloodPressure  String?
    chiefComplaint String?
    createAt       DateTime @default(now())
    updateAt       DateTime @updatedAt

    attendingNurse     User[] @relation("attendingNurse")
    attendingPhysician User[] @relation("attendingPhysician")

    attendedPatient User? @relation("attendedPatient", fields: [addedById], references: [id], onDelete: Restrict, onUpdate: NoAction)
    addedById       Int?
}

enum Role {
    ADMIN
    NURSE
    PHYSICIAN
    PHARMACIST
}

enum RoomCat {
    WARD
    SEMI_PRIVATE
    PRIVATE
}

enum RoomStatus {
    VACANT
    OCCUPIED
    OUT_OF_SERVICE
}
