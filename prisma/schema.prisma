generator client {
  provider = "prisma-client-js"

  previewFeatures = ["referentialIntegrity", "fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")

  referentialIntegrity = "prisma"
}

model Example {
  id Int @id @default(autoincrement())
}

model User {
  id        Int        @id @default(autoincrement())
  firstName String?
  lastName  String?
  email     String?    @unique
  role      Role       @default(NURSE)
  image     String?
  gender    String?
  birthday  DateTime?
  address   String?
  mobile    String?
  password  String?
  active    Boolean    @default(true)
  createAt  DateTime   @default(now())
  updateAt  DateTime   @updatedAt
  Physician Physician?

  addedPatient    Patient[]
  userLogs        UserLogs[]
  medicineRequest MedicineRequest[]
}

model Physician {
  id            Int     @id @default(autoincrement())
  expertise     String?
  licenseNumber String?
  userId        Int     @unique
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  medicalRecord MedicalRecord[]
}

model Room {
  id       Int        @id @default(autoincrement())
  roomNo   String?
  category RoomCat    @default(WARD)
  station  String?
  status   RoomStatus @default(VACANT)
  floor    String?
  price    Decimal?   @db.Decimal(10, 2)
  active   Boolean    @default(true)

  medicalRecord MedicalRecord[]
}

model Patient {
  id          Int          @id @default(autoincrement())
  firstName   String?
  lastName    String?
  middleName  String?
  gender      String?
  birthday    DateTime?
  address     String?
  mobile      String?
  civilStatus CivilStatus?
  nationality String?
  religion    String?
  bloodType   String?
  active      Boolean      @default(true)
  isAdmitted  Boolean      @default(false)

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  addedPatient User? @relation(fields: [addedById], references: [id], onDelete: Restrict, onUpdate: NoAction)
  addedById    Int?

  medicalRecord MedicalRecord[]
}

model MedicalRecord {
  id              Int               @id @default(autoincrement())
  weight          String?
  height          String?
  bloodPressure   String?
  chiefComplaint  String?
  guardian        String?
  status          MedicalStatus     @default(Admitted)
  admittedAt      DateTime          @default(now())
  discharedAt     DateTime?
  createAt        DateTime          @default(now())
  updateAt        DateTime          @updatedAt
  active          Boolean           @default(true)
  result          MedicalResult?
  medicineRequest MedicineRequest[]

  room      Room      @relation(fields: [roomId], references: [id])
  patient   Patient   @relation(fields: [patientId], references: [id])
  physician Physician @relation(fields: [physicianId], references: [id])

  roomId      Int
  patientId   Int
  physicianId Int
}

model MedicineRequest {
  id            Int               @id @default(autoincrement())
  quantity      Int?
  requestStatus MedicineReqStatus @default(Pending)
  active        Boolean           @default(true)

  medicine      Medicine?      @relation(fields: [medicineId], references: [id])
  requestedBy   User           @relation(fields: [userId], references: [id], onDelete: Restrict, onUpdate: NoAction)
  MedicalRecord MedicalRecord? @relation(fields: [medicalRecordId], references: [id])

  medicineId      Int
  userId          Int
  medicalRecordId Int
}

model Medicine {
  id       Int      @id @default(autoincrement())
  name     String?
  quantity Int?
  unit     Unit
  price    Decimal? @db.Decimal(10, 2)
  active   Boolean  @default(true)

  MedicineRequest MedicineRequest[]
}

model UserLogs {
  id       Int      @id @default(autoincrement())
  type     String?
  createAt DateTime @default(now())
  user     User     @relation(fields: [userId], references: [id])
  userId   Int
}

enum MedicineReqStatus {
  Pending
  Delivered
}

enum MedicalStatus {
  Admitted
  Discharged
  Tranfered
}

enum MedicalResult {
  Recovered
  Died
  Improved
  Unimproved
}

enum CivilStatus {
  Single
  Married
  Divorced
  Separated
  Widowed
}

enum Unit {
  kg
  g
  mg
  mcg
  L
  ml
  cc
  mol
  mmol
}

enum Role {
  ADMIN
  NURSE
  PHYSICIAN
  PHARMACIST
}

enum RoomCat {
  WARD
  SEMI_PRIVATE
  PRIVATE
}

enum RoomStatus {
  VACANT
  OCCUPIED
  OUT_OF_SERVICE
}
